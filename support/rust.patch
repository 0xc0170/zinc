From 18c6b97635c69ec848ce97c2b2c71d53dd9c0bdd Mon Sep 17 00:00:00 2001
From: Vladimir Pouzanov <farcaller@google.com>
Date: Sun, 4 May 2014 12:01:54 +0100
Subject: [PATCH] libstd/liblibc patches for zinc

---
 liblibc/lib.rs      |  1 -
 libstd/lib.rs       |  2 +-
 libstd/macros.rs    | 16 ++++++++++------
 libstd/rt/stack.rs  |  2 +-
 libstd/rt/unwind.rs | 12 +++++-------
 5 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/liblibc/lib.rs b/liblibc/lib.rs
index a4593c1..234e827 100644
--- a/liblibc/lib.rs
+++ b/liblibc/lib.rs
@@ -14,7 +14,6 @@
 #![no_std] // we don't need std, and we can't have std, since it doesn't exist
            // yet. std depends on us.
 #![crate_type = "rlib"]
-#![crate_type = "dylib"]
 
 /*!
 * Bindings for the C standard library and other platform libraries
diff --git a/libstd/lib.rs b/libstd/lib.rs
index 841a73f..1ad296f 100644
--- a/libstd/lib.rs
+++ b/libstd/lib.rs
@@ -99,7 +99,6 @@
 #![comment = "The Rust standard library"]
 #![license = "MIT/ASL2"]
 #![crate_type = "rlib"]
-#![crate_type = "dylib"]
 #![doc(html_logo_url = "http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png",
        html_favicon_url = "http://www.rust-lang.org/favicon.ico",
        html_root_url = "http://static.rust-lang.org/doc/master")]
@@ -285,4 +284,5 @@ mod std {
     pub use ty;
     pub use unstable;
     pub use vec;
+    pub use intrinsics;
 }
diff --git a/libstd/macros.rs b/libstd/macros.rs
index dbaef33..f45f3f2 100644
--- a/libstd/macros.rs
+++ b/libstd/macros.rs
@@ -40,9 +40,13 @@ macro_rules! fail(
     () => (
         fail!("explicit failure")
     );
-    ($msg:expr) => (
-        ::std::rt::begin_unwind($msg, file!(), line!())
-    );
+    ($msg:expr) => ({
+        #[inline(always)]
+        fn real_abort() ->! {
+            unsafe { ::std::intrinsics::abort() };
+        }
+        real_abort()
+    });
     ($fmt:expr, $($arg:tt)*) => ({
         // a closure can't have return type !, so we need a full
         // function to pass to format_args!, *and* we need the
@@ -56,10 +60,10 @@ macro_rules! fail(
         // were seen when forcing this to be inlined, and that number just goes
         // up with the number of calls to fail!()
         #[inline(always)]
-        fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {
-            ::std::rt::begin_unwind_fmt(fmt, file!(), line!())
+        fn real_abort() ->! {
+            unsafe { ::std::intrinsics::abort() };
         }
-        format_args!(run_fmt, $fmt, $($arg)*)
+        real_abort()
     });
 )
 
diff --git a/libstd/rt/stack.rs b/libstd/rt/stack.rs
index 963ff00..7c0852a 100644
--- a/libstd/rt/stack.rs
+++ b/libstd/rt/stack.rs
@@ -34,7 +34,7 @@ pub static RED_ZONE: uint = 20 * 1024;
 #[no_split_stack] // - it would be sad for this function to trigger __morestack
 #[doc(hidden)]    // - Function must be `pub` to get exported, but it's
                   //   irrelevant for documentation purposes.
-#[cfg(not(test))] // in testing, use the original libstd's version
+#[cfg(not(test), disabled)] // in testing, use the original libstd's version
 pub extern "C" fn rust_stack_exhausted() {
     use option::{Option, None, Some};
     use rt::local::Local;
diff --git a/libstd/rt/unwind.rs b/libstd/rt/unwind.rs
index 4f84202..6c02779 100644
--- a/libstd/rt/unwind.rs
+++ b/libstd/rt/unwind.rs
@@ -250,7 +250,7 @@ pub mod eabi {
 
 // ARM EHABI uses a slightly different personality routine signature,
 // but otherwise works the same.
-#[cfg(target_arch = "arm", not(test))]
+#[cfg(target_arch = "arm", not(test), disabled)]
 #[allow(visible_private_types)]
 pub mod eabi {
     use uw = rt::libunwind;
@@ -297,20 +297,18 @@ pub mod eabi {
 
 #[cold]
 #[lang="fail_"]
+#[no_split_stack]
 #[cfg(not(test))]
 pub fn fail_(expr: *u8, file: *u8, line: uint) -> ! {
-    begin_unwind_raw(expr, file, line);
+    unsafe { ::std::intrinsics::abort() }
 }
 
 #[cold]
 #[lang="fail_bounds_check"]
+#[no_split_stack]
 #[cfg(not(test))]
 pub fn fail_bounds_check(file: *u8, line: uint, index: uint, len: uint) -> ! {
-    use c_str::ToCStr;
-
-    let msg = format!("index out of bounds: the len is {} but the index is {}",
-                      len as uint, index as uint);
-    msg.with_c_str(|buf| fail_(buf as *u8, file, line))
+    unsafe { ::std::intrinsics::abort() }
 }
 
 /// This is the entry point of unwinding for things like lang items and such.
-- 
1.8.5.2

